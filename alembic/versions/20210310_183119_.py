"""empty message

Revision ID: 20210310_183119
Revises: 20210307_155406
Create Date: 2021-03-10 18:31:20.024968

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "20210310_183119"
down_revision = "20210307_155406"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "trade_order",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "user_id",
            sa.Integer(),
            nullable=False,
            comment="アクティブな注文などがあるため、RESTRICTとする。（現在はめんどいのでCASCADE）",
        ),
        sa.Column(
            "trade_account_id",
            sa.Integer(),
            nullable=False,
            comment="アクティブな注文などがあるため、RESTRICTとする。（現在はめんどいのでCASCADE）",
        ),
        sa.Column(
            "trade_virtual_account_id",
            sa.Integer(),
            nullable=False,
            comment="アクティブな注文などがあるため、RESTRICTとする。（現在はめんどいのでCASCADE）",
        ),
        sa.Column(
            "entry_order_id",
            sa.Integer(),
            nullable=True,
            comment="エントリーとなったorder.id\u3000エントリーの時はNoneとなり、これで一連の流れを表現する",
        ),
        sa.Column("is_backtest", sa.BOOLEAN(), nullable=False),
        sa.Column("provider", sa.String(length=255), nullable=False),
        sa.Column("market", sa.String(length=255), nullable=False),
        sa.Column("product", sa.String(length=255), nullable=False),
        sa.Column("periods", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "CANCELED",
                "CANCELE_REQUESTED",
                "READY",
                "REQUESTED",
                "CONTRACTED",
                name="positionstatus",
            ),
            nullable=False,
        ),
        sa.Column("ask_or_bid", sa.Enum("ASK", "BID", name="askbid"), nullable=False),
        sa.Column("order_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("order_price", sa.DECIMAL(), nullable=False),
        sa.Column("order_unit", sa.DECIMAL(), nullable=False),
        sa.Column("contract_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("contract_price", sa.DECIMAL(), nullable=True),
        sa.Column("contract_unit", sa.DECIMAL(), nullable=True),
        sa.Column(
            "slippage",
            sa.DECIMAL(),
            nullable=True,
            comment="バックテストにおいては約定価格のブレを表現し、実際の取引ではショートサーキットのように動作します？？",
        ),
        sa.Column("limit_price", sa.DECIMAL(), nullable=True, comment="指定価格で利益を確定します。"),
        sa.Column("loss_price", sa.DECIMAL(), nullable=True, comment="指定価格で損益を確定します。"),
        sa.Column("profit_loss", sa.DECIMAL(), nullable=False),
        sa.Column("commission", sa.DECIMAL(), nullable=False),
        sa.Column("api_data", sa.JSON(), nullable=False),
        sa.Column("reason", sa.String(length=255), nullable=False),
        sa.ForeignKeyConstraint(
            ["entry_order_id"],
            ["trade_order.id"],
        ),
        sa.ForeignKeyConstraint(
            ["trade_account_id"], ["trade_account.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["trade_virtual_account_id"],
            ["trade_virtual_account.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_constraint(
        "trade_account_user_id_fkey", "trade_account", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "trade_account", "users", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_constraint(
        "trade_virtual_account_trade_account_id_name_key",
        "trade_virtual_account",
        type_="unique",
    )
    op.create_unique_constraint(None, "trade_virtual_account", ["user_id", "name"])
    op.drop_constraint(
        "trade_virtual_account_trade_account_id_fkey",
        "trade_virtual_account",
        type_="foreignkey",
    )
    op.drop_constraint(
        "trade_virtual_account_user_id_fkey",
        "trade_virtual_account",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None, "trade_virtual_account", "users", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None,
        "trade_virtual_account",
        "trade_account",
        ["trade_account_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "trade_virtual_account", type_="foreignkey")
    op.drop_constraint(None, "trade_virtual_account", type_="foreignkey")
    op.create_foreign_key(
        "trade_virtual_account_user_id_fkey",
        "trade_virtual_account",
        "users",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "trade_virtual_account_trade_account_id_fkey",
        "trade_virtual_account",
        "trade_account",
        ["trade_account_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="CASCADE",
    )
    op.drop_constraint(None, "trade_virtual_account", type_="unique")
    op.create_unique_constraint(
        "trade_virtual_account_trade_account_id_name_key",
        "trade_virtual_account",
        ["trade_account_id", "name"],
    )
    op.drop_constraint(None, "trade_account", type_="foreignkey")
    op.create_foreign_key(
        "trade_account_user_id_fkey",
        "trade_account",
        "users",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="CASCADE",
    )
    op.drop_table("trade_order")
    # ### end Alembic commands ###
