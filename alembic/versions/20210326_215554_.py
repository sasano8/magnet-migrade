"""empty message

Revision ID: 20210326_215554
Revises: 20210326_215518
Create Date: 2021-03-26 21:55:55.157297

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "20210326_215554"
down_revision = "20210326_215518"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("trade_order")
    op.drop_table("trade_account")
    op.drop_table("trade_virtual_account")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "trade_virtual_account",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("version", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.VARCHAR(length=1024), autoincrement=False, nullable=False
        ),
        sa.Column(
            "product", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("periods", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "allocated_margin", sa.NUMERIC(), autoincrement=False, nullable=False
        ),
        sa.Column("allocation_rate", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("ask_limit_rate", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("ask_loss_rate", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("bid_limit_rate", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("bid_loss_rate", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="trade_virtual_account_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="trade_virtual_account_pkey"),
        sa.UniqueConstraint(
            "user_id", "name", name="trade_virtual_account_user_id_name_key"
        ),
    )
    op.create_table(
        "trade_account",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("version", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.VARCHAR(length=1024), autoincrement=False, nullable=False
        ),
        sa.Column(
            "provider", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "market", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("margin", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="trade_account_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="trade_account_pkey"),
    )
    op.create_table(
        "trade_order",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "user_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="アクティブな注文などがあるため、RESTRICTとする。（現在はめんどいのでCASCADE）",
        ),
        sa.Column("is_backtest", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "provider", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "market", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "product", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("periods", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "CANCELED",
                "CANCELE_REQUESTED",
                "READY",
                "REQUESTED",
                "CONTRACTED",
                name="positionstatus",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "ask_or_bid",
            postgresql.ENUM("ASK", "BID", name="askbid"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "order_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("order_price", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("order_unit", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column(
            "contract_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
            comment="約定日時。Noneなら約定時に現在日時が入力される。バックテストのため、任意の日付を入力可能",
        ),
        sa.Column("contract_price", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("contract_unit", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column(
            "slippage",
            sa.NUMERIC(),
            autoincrement=False,
            nullable=True,
            comment="バックテストにおいては約定価格のブレを表現し、実際の取引ではショートサーキットのように動作します？？",
        ),
        sa.Column(
            "limit_price",
            sa.NUMERIC(),
            autoincrement=False,
            nullable=True,
            comment="指定価格で利益を確定します。",
        ),
        sa.Column(
            "loss_price",
            sa.NUMERIC(),
            autoincrement=False,
            nullable=True,
            comment="指定価格で損益を確定します。",
        ),
        sa.Column("commission", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column(
            "api_data",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "reason", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("is_entry", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="trade_order_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="trade_order_pkey"),
    )
    # ### end Alembic commands ###
